Gorilla
=======

Purpose
-------

Gorilla is meant to be simple, and not do everything. Its focus is not speed, but simplicity and flexibility. Gorilla only scales for personal and small team use (so don't try to make the next wikipedia with it). See "Speed" below for more information.

Notice
------

Gorilla is decently stable, but is missing some features. All it is currently suitable for is a bug tracker, TODO list, and other simpler things. The goal for version 1.0 is to have it be able to be used as a wiki.

Speed
-----

Gorilla runs very quickly for all the practical use I've gotten out of it. But I decided to create more in-depth and stressful tests (see stress.rb and test.rb if you would like to run them yourself). 

What will interest most people is the usability benchmarks at the bottom, which shows what the user experiences as the database grows.

Parsing Benchmarks (averaged over 3 tests):
1,000 database entries: 0.04 seconds
10,000 database entries: 0.42 seconds
100,000 database entries: 4.55 seconds
1,000,000 database entries: 59.26 seconds
10,000,000 database entries: UNKNOWN (Ruby segfaults)
I should stop now...

Size Benchmarks (each line in the database is about the same which is unrealistic, but the statistics are still interesting):
1,000 database entries: 44.6 KB (45641 bytes)
10,000 database entries: 452.6 KB (463476 bytes)
100,000 database entries: 4.5 MB (4737312 bytes)
1,000,000 database entries: 46.1 MB (48371472 bytes)
10,000,000 database entries: 470.9 MB (493729964 bytes)

Usuability benchmarks:
1,000 database entries: The index listing of everything takes the longest. Everything else runs at top speed

10,000 database entries: Index listing of everything is still the slowest, to the point of becoming almost unusable. Everything else is noticeably slower

100,000 database entries: Gorilla becomes unuseable and uses 100% CPU, the process has to manually be killed to end the program (but, as this was originally designed for a bug database, I would hope you don't have 100,000 bugs!)
